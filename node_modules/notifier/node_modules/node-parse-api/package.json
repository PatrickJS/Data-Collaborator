{
  "name": "node-parse-api",
  "description": "A Parse.com REST API client for Node.js",
  "version": "0.2.2",
  "author": {
    "name": "Chris Johnson",
    "email": "tenorviol@yahoo.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/leveton/node-parse-api"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "Node Parse API\n==============\n\ninstall\n-------\n\n    npm install node-parse-api\n\nexamples\n--------\n\n### setup\n\n    var Parse = require('node-parse-api').Parse;\n    \n    var APP_ID = ...;\n    var MASTER_KEY = ...;\n    \n    var app = new Parse(APP_ID, MASTER_KEY);\n\n### insert an object\n\n    // add a Foo object, { foo: 'bar' }\n    app.insert('Foo', { foo: 'bar' }, function (err, response) {\n      console.log(response);\n    });\n\n### insert a User \n\n    app.insertCustom('users', { foo: 'bar' }, function (err, response) {\n      console.log(response);\n    });\n\n### insert a User with GeoPoints \n\n    app.insertCustom('users', { foo: 'bar', location: {__type: 'GeoPoint', latitude: <int>, longitude: <int>} }, function (err, response) {\n      console.log(response);\n    });\n\n### insert a file\n\n    app.insertFile(fileName, data, fileType, function (err, response) {\n      fileLink = response.url;\n      parseName = response.name;\n        app.insert('Foo', { \"foo\" : fileLink, \"bar\" : parseName }, function(erro, res){\n       })\n    });\n\n### find one\n\n    // the Foo with id = 'someId'\n    app.find('Foo', 'someId', function (err, response) {\n      console.log(response);\n    });\n\n### find many\n\n    // all Foo objects with foo = 'bar'\n    app.findMany('Foo', { foo: 'bar' }, function (err, response) {\n      console.log(response);\n    });\n\n### count the number of objects\n\n   //just use findMany, and call results.length on the response\n   app.findMany('Foo', { user: '<objectId>' }, function (err, response) {\n     console.log(response.results.length);\n});\n\n### update\n\n    app.update('Foo', 'someId', { foo: 'fubar' }, function (err, response) {\n      console.log(response);\n    });\n\n### delete\n\n    app.delete('Foo', 'someId', function (err) {\n      // nothing to see here\n    });\n\n### reset a password\n\n    //email is built into Parse's special User class \n    app.passwordReset(email, function(err, response){\n      console.log(response);\n    });\n\n### update User email\n\n    //email is built into Parse's special User class \n    app.updateUserEmail(objectId, email, function(err, response){\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(response);\n      }\n    });\n\n### insert installation data\n\n    //first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.\n    app.insertInstallationData(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", function(err, response){\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(response);\n      }\n    });\n\n### insert installation data with timeZone\n\n    //first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.  Third arg is the timezone string.\n    app.insertInstallationDataWithTimeZone(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", \"EST\", function(err, response){\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(response);\n      }\n    });\n\n### insert installation data with channels\n\n    //first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.  Third arg is the channels array.\n    arr = [\"news\", \"sports\"];\n    app.insertInstallationDataWithChannels(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", arr, function(err, response){\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(response);\n      }\n    });\n\n### insert installation data with timeZone and channels\n\n    //first arg is either 'ios' or 'android'.  second arg is either the Apple deviceToken or the Android installationId.  Third arg is the timezone string.  4th is the channels array.\n    arr = [\"news\", \"sports\"];\n    app.insertInstallationDataWithTimeZoneAndChannels(\"ios\", \"0123456784abcdef0123456789abcdef0123456789abcdef0123456789abcdef\", \"EST\", arr, function(err, response){\n      if (err) {\n        console.log(err);\n      } else {\n        console.log(response);\n      }\n    });\n\n### create a role for a particular user\n    \n    //create a data object that links the user object's objectId to the role\n\n    var data = {\n      name: 'Administrator',\n      ACL: {\n          \"*\": {\n            \"read\": true\n          }\n        },\n      roles: {\n          \"__op\": \"AddRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_Role\",\n             \"objectId\": \"<objectId>\"\n            }\n          ]\n        },\n      users: {\n          \"__op\": \"AddRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_User\",\n              \"objectId\": \"<objectId>\"\n            }\n          ]\n        }\n    };\n\n      app.insertRole(data, function(err, resp){\n         console.log(resp);\n       });\n\n### get a role\n\n    //pass the role object's objectId\n    app.getRole(\"<objectId>\", function(err, resp){  \n      console.log(resp);\n    });\n\n### update a role\n    //pass the objectId of the role, data contains the user's objectId\n\n    var data = {\n      users: {\n          \"__op\": \"RemoveRelation\",\n          \"objects\": [\n            {\n              \"__type\": \"Pointer\",\n              \"className\": \"_User\",\n              \"objectId\": \"<objectId>\"\n            }\n          ]\n        } \n    };\n\n      app.updateRole(\"<objectId>\", data, function(err, resp){ \n        console.log(resp);\n      });\n\n### delete a role\n  \n    //pass the objectId of the role \n    app.deleteRole(\"<objectId>\", function(err, resp){});\n\n### get all the roles\n\n    app.getRoles(function(err, resp){});\n\n### get a role against a cetain param\n\n    var params = {\n       where: { name: \"Administrator\" } \n    };\n\n       app.getRoles(params, function(err, resp){\n         console.log(resp);\n       });\n\n### send a push notification\n    \n    //The data param has to follow the data structure as described in the [Parse REST API](https://www.parse.com/docs/rest#push)\n    var notification = {\n      channels: [''],\n      data: {\n        alert: \"sending too many push notifications is obnoxious\"\n      }\n    };\n    app.sendPush(notification, function(err, resp){\n      console.log(resp);\n    });\n\n### note on sending dates\n    \n    //when inserting a data, you must use the Parse date object structure, i.e.:\n    {\n      \"__type\": \"Date\", \n      \"iso\": new Date(\"<year>\", \"<month>\", \"<day>\").toJSON()\n    }",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/leveton/node-parse-api/issues"
  },
  "_id": "node-parse-api@0.2.2",
  "_from": "node-parse-api@latest"
}
